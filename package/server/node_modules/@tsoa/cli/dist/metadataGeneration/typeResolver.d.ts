import { Tsoa } from '@tsoa/runtime';
import * as ts from 'typescript';
import { MetadataGenerator } from './metadataGenerator';
interface Context {
    [name: string]: {
        type: ts.TypeNode;
        name: string;
    };
}
export declare class TypeResolver {
    private readonly typeNode;
    private readonly current;
    private readonly parentNode?;
    private context;
    private readonly referencer?;
    constructor(typeNode: ts.TypeNode, current: MetadataGenerator, parentNode?: ts.Node | undefined, context?: Context, referencer?: ts.Type | undefined);
    static clearCache(): void;
    resolve(): Tsoa.Type;
    private getLiteralValue;
    private getPrimitiveType;
    private getDateType;
    private getDesignatedModels;
    private hasFlag;
    private getEnumerateType;
    private getReferencer;
    private static typeReferenceToEntityName;
    private calcRefTypeName;
    private calcMemberJsDocProperties;
    private calcTypeName;
    private calcTypeReferenceTypeName;
    private getReferenceType;
    private static mergeTwoRefEnumTypes;
    private static mergeTwoRefObjectTypes;
    private static mergeReferenceTypes;
    private addToLocalReferenceTypeCache;
    private getTypeAliasReference;
    private getModelReference;
    private getRefTypeName;
    private attemptToResolveKindToPrimitive;
    private createCircularDependencyResolver;
    private nodeIsUsable;
    private getModelTypeDeclarations;
    private getSymbolAtLocation;
    private getModelProperties;
    private propertyFromSignature;
    private propertyFromDeclaration;
    private getModelAdditionalProperties;
    private typeArgumentsToContext;
    private getModelInheritedProperties;
    private hasPublicModifier;
    private hasStaticModifier;
    private isAccessibleParameter;
    private getNodeDescription;
    private getNodeFormat;
    private getNodeExample;
    private getNodeExtension;
    private getDecoratorsByIdentifier;
    private static getDefault;
}
export {};
