import type { CSpellConfigFile } from 'cspell-config-lib';
import type { IConfigLoader } from './configLoader.js';
import type { PnPSettingsOptional } from './PnPSettings.js';
import type { CSpellSettingsI, CSpellSettingsWST } from './types.js';
/**
 *
 * @param searchFrom the directory / file to start searching from.
 * @param pnpSettings - related to Using Yarn PNP.
 * @returns the resulting settings
 */
export declare function searchForConfig(searchFrom: URL | string | undefined, pnpSettings?: PnPSettingsOptional): Promise<CSpellSettingsI | undefined>;
/**
 * Load a CSpell configuration files.
 * @param file - path or package reference to load.
 * @param pnpSettings - PnP settings
 * @returns normalized CSpellSettings
 */
export declare function loadConfig(file: string, pnpSettings?: PnPSettingsOptional): Promise<CSpellSettingsI>;
export declare function readConfigFile(filename: string | URL, relativeTo?: string | URL): Promise<CSpellConfigFile>;
/**
 * Might throw if the settings have not yet been loaded.
 * @deprecated use {@link getGlobalSettingsAsync} instead.
 */
export declare function getGlobalSettings(): CSpellSettingsI;
/**
 * Loads and caches the global settings.
 * @returns - global settings
 */
export declare function getGlobalSettingsAsync(): Promise<CSpellSettingsI>;
export declare function getCachedFileSize(): number;
export declare function clearCachedSettingsFiles(): void;
export declare function getDefaultConfigLoader(): IConfigLoader;
export declare function readRawSettings(filename: string | URL, relativeTo?: string | URL): Promise<CSpellSettingsWST>;
//# sourceMappingURL=defaultConfigLoader.d.ts.map