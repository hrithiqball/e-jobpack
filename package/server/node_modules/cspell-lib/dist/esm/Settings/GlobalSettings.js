import { CSpellConfigFileInMemory, CSpellConfigFileJson } from 'cspell-config-lib';
import { pathToFileURL } from 'url';
import { isErrnoException } from '../util/errors.js';
import { logError } from '../util/logger.js';
import { getSourceDirectoryUrl, toFilePathOrHref } from '../util/url.js';
import { ConfigStore } from './cfgStore.js';
import { configToRawSettings } from './Controller/configLoader/configToRawSettings.js';
const packageName = 'cspell';
export async function getRawGlobalSettings() {
    return configToRawSettings(await getGlobalConfig());
}
export function getGlobalConfig() {
    const name = 'CSpell Configstore';
    const configPath = getGlobalConfigPath();
    const urlGlobal = configPath ? pathToFileURL(configPath) : new URL('global-config.json', getSourceDirectoryUrl());
    const source = {
        name,
        filename: toFilePathOrHref(urlGlobal),
    };
    const globalConf = { source };
    let hasGlobalConfig = false;
    try {
        const cfgStore = new ConfigStore(packageName);
        const cfg = cfgStore.all;
        // Only populate globalConf is there are values.
        if (cfg && Object.keys(cfg).length) {
            Object.assign(globalConf, cfg);
            globalConf.source = {
                name,
                filename: cfgStore.path,
            };
            hasGlobalConfig = Object.keys(cfg).length > 0;
        }
    }
    catch (error) {
        if (!isErrnoException(error) ||
            !error.code ||
            !['ENOENT', 'EACCES', 'ENOTDIR', 'EISDIR'].includes(error.code)) {
            logError(error);
        }
    }
    const settings = { ...globalConf, name, source };
    const ConfigFile = hasGlobalConfig ? CSpellConfigFileJson : CSpellConfigFileInMemory;
    return Promise.resolve(new ConfigFile(urlGlobal, settings));
}
export async function writeRawGlobalSettings(settings) {
    const toWrite = {
        import: settings.import,
    };
    const cfgStore = new ConfigStore(packageName);
    cfgStore.set(toWrite);
}
export function getGlobalConfigPath() {
    try {
        const cfgStore = new ConfigStore(packageName);
        return cfgStore.path;
    }
    catch (e) {
        return undefined;
    }
}
//# sourceMappingURL=GlobalSettings.js.map