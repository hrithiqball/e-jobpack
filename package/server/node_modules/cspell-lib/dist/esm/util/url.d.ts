/**
 * Convert a URL into a string. If it is a file URL, convert it to a path.
 * @param url - URL
 * @returns path or href
 */
export declare function toFilePathOrHref(url: URL | string): string;
/**
 * This is a URL that can be used for searching for modules.
 * @returns URL for the source directory
 */
export declare function getSourceDirectoryUrl(): URL;
/**
 * @param path - path to convert to a URL
 * @param relativeTo - URL to resolve the path against or the current working directory.
 * @returns a URL
 */
export declare function relativeTo(path: string, relativeTo?: URL | string): URL;
export declare function cwdURL(): URL;
export declare function resolveFileWithURL(file: string | URL, relativeToURL: URL): URL;
export declare function normalizePathSlashesForUrl(filePath: string, sep?: string | RegExp): string;
export declare function toFileUrl(file: string | URL): URL;
export declare function toFileDirUrl(dir: string | URL): URL;
export declare function addTrailingSlash(url: URL): URL;
export declare function toURL(href: string | URL, relativeTo?: string | URL): URL;
export declare function fileURLOrPathToPath(filenameOrURL: string | URL): string;
export declare function isURLLike(url: string | URL): boolean;
export declare function isFileURL(url: string | URL): boolean;
export declare function isDataURL(url: string | URL): boolean;
export declare function windowsDriveLetterToUpper(absoluteFilePath: string): string;
//# sourceMappingURL=url.d.ts.map