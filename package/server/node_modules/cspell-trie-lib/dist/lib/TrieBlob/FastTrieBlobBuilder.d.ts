import type { BuilderCursor, TrieBuilder } from '../Builder/index.js';
import type { PartialTrieInfo, TrieInfo } from '../ITrieNode/TrieInfo.js';
import type { TrieRoot } from '../TrieNode/TrieNode.js';
import { FastTrieBlob } from './FastTrieBlob.js';
import type { FastTrieBlobBitMaskInfo } from './FastTrieBlobBitMaskInfo.js';
export declare class FastTrieBlobBuilder implements TrieBuilder<FastTrieBlob> {
    private charToIndexMap;
    private charIndex;
    private nodes;
    private _readonly;
    private IdxEOW;
    private _cursor;
    private _options;
    readonly bitMasksInfo: FastTrieBlobBitMaskInfo;
    constructor(options?: PartialTrieInfo, bitMasksInfo?: FastTrieBlobBitMaskInfo);
    setOptions(options: PartialTrieInfo): Readonly<TrieInfo>;
    get options(): Readonly<TrieInfo>;
    private getCharIndex;
    insert(word: string | Iterable<string> | string[]): this;
    getCursor(): BuilderCursor;
    private createCursor;
    private _insert;
    has(word: string): boolean;
    isReadonly(): boolean;
    freeze(): this;
    build(): FastTrieBlob;
    static fromWordList(words: string[] | Iterable<string>, options?: PartialTrieInfo): FastTrieBlob;
    static fromTrieRoot(root: TrieRoot): FastTrieBlob;
    static NodeMaskEOW: number;
    static NodeChildRefShift: number;
    static NodeMaskChildCharIndex: number;
    static DefaultBitMaskInfo: FastTrieBlobBitMaskInfo;
}
//# sourceMappingURL=FastTrieBlobBuilder.d.ts.map