import type { ITrieNode, ITrieNodeId, ITrieNodeRoot } from '../ITrieNode/ITrieNode.js';
import type { TrieInfo } from '../ITrieNode/TrieInfo.js';
import type { FastTrieBlobInternals } from './FastTrieBlobInternals.js';
declare class FastTrieBlobINode implements ITrieNode {
    readonly trie: FastTrieBlobInternals;
    readonly nodeIdx: number;
    readonly id: number;
    readonly size: number;
    readonly node: number[];
    readonly eow: boolean;
    charToIdx: Record<string, number> | undefined;
    private _keys;
    constructor(trie: FastTrieBlobInternals, nodeIdx: number);
    keys(): readonly string[];
    /** get keys to children */
    private calcKeys;
    values(): readonly ITrieNode[];
    entries(): readonly (readonly [string, ITrieNode])[];
    /** get child ITrieNode */
    get(char: string): ITrieNode | undefined;
    has(char: string): boolean;
    hasChildren(): boolean;
    child(keyIdx: number): ITrieNode;
    getCharToIdxMap(): Record<string, number>;
}
export declare class FastTrieBlobIRoot extends FastTrieBlobINode implements ITrieNodeRoot {
    readonly info: Readonly<TrieInfo>;
    constructor(trie: FastTrieBlobInternals, nodeIdx: number, info: Readonly<TrieInfo>);
    resolveId(id: ITrieNodeId): ITrieNode;
}
export {};
//# sourceMappingURL=FastTrieBlobIRoot.d.ts.map