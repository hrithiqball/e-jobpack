import type { ITrieNode, ITrieNodeRoot } from '../ITrieNode/ITrieNode.js';
import type { PartialTrieInfo, TrieInfo } from '../ITrieNode/TrieInfo.js';
import type { TrieData } from '../TrieData.js';
export declare class TrieBlob implements TrieData {
    protected nodes: Uint32Array;
    protected charIndex: string[];
    protected charToIndexMap: Record<string, number>;
    readonly info: Readonly<TrieInfo>;
    private _forbidIdx;
    private _size;
    private _iTrieRoot;
    constructor(nodes: Uint32Array, charIndex: string[], info: PartialTrieInfo);
    has(word: string): boolean;
    isForbiddenWord(word: string): boolean;
    hasForbiddenWords(): boolean;
    getRoot(): ITrieNodeRoot;
    private _getRoot;
    getNode(prefix: string): ITrieNode | undefined;
    private _has;
    private _lookupNode;
    words(): Iterable<string>;
    get size(): number;
    toJSON(): {
        charIndex: string[];
        options: Readonly<TrieInfo>;
        nodes: string[];
    };
    encodeBin(): Uint8Array;
    static decodeBin(blob: Uint8Array): TrieBlob;
    static NodeMaskEOW: number;
    static NodeMaskNumChildren: number;
    static NodeMaskNumChildrenShift: number;
    static NodeChildRefShift: number;
    static NodeMaskChildCharIndex: number;
}
//# sourceMappingURL=TrieBlob.d.ts.map