import type { ITrieNode, ITrieNodeId, ITrieNodeRoot } from '../ITrieNode/ITrieNode.js';
import type { TrieInfo } from '../ITrieNode/TrieInfo.js';
interface BitMaskInfo {
    readonly NodeMaskEOW: number;
    readonly NodeMaskNumChildren: number;
    readonly NodeMaskChildCharIndex: number;
    readonly NodeChildRefShift: number;
}
export declare class TrieBlobInternals implements BitMaskInfo {
    readonly nodes: Uint32Array;
    readonly charIndex: string[];
    readonly charToIndexMap: Readonly<Record<string, number>>;
    readonly NodeMaskEOW: number;
    readonly NodeMaskNumChildren: number;
    readonly NodeMaskChildCharIndex: number;
    readonly NodeChildRefShift: number;
    constructor(nodes: Uint32Array, charIndex: string[], charToIndexMap: Readonly<Record<string, number>>, maskInfo: BitMaskInfo);
}
declare class TrieBlobINode implements ITrieNode {
    readonly trie: TrieBlobInternals;
    readonly nodeIdx: number;
    readonly id: number;
    readonly size: number;
    readonly node: number;
    readonly eow: boolean;
    private _keys;
    charToIdx: Record<string, number> | undefined;
    constructor(trie: TrieBlobInternals, nodeIdx: number);
    /** get keys to children */
    keys(): readonly string[];
    values(): readonly ITrieNode[];
    entries(): readonly (readonly [string, ITrieNode])[];
    /** get child ITrieNode */
    get(char: string): ITrieNode | undefined;
    has(char: string): boolean;
    hasChildren(): boolean;
    child(keyIdx: number): ITrieNode;
    getCharToIdxMap(): Record<string, number>;
}
export declare class TrieBlobIRoot extends TrieBlobINode implements ITrieNodeRoot {
    readonly info: Readonly<TrieInfo>;
    constructor(trie: TrieBlobInternals, nodeIdx: number, info: Readonly<TrieInfo>);
    resolveId(id: ITrieNodeId): ITrieNode;
}
export {};
//# sourceMappingURL=TrieBlobIRoot.d.ts.map