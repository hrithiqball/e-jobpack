datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  schemas  = ["public"]
}

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["multiSchema"]
  binaryTargets   = ["native", "linux-musl-openssl-3.0.x"]
}

enum Department {
  management
  exploration
  INSTRUMENT
  ELECTRICAL
  MECHANICAL
  MANAGEMENT

  @@schema("public")
}

enum Role {
  ADMIN
  TECHNICIAN
  admin
  supervisor
  maintainer

  @@schema("public")
}

enum TaskType {
  choice
  selectOne
  check
  number
  selectMultiple

  @@schema("public")
}

model Asset {
  uid                               String         @id
  name                              String
  description                       String?
  type                              String?
  createdBy                         String         @map("created_by")
  createdOn                         DateTime       @map("created_on")
  updatedBy                         String         @map("updated_by")
  lastMaintenance                   DateTime?      @map("last_maintenance")
  lastMaintainee                    String[]       @map("last_maintainee")
  location                          String?
  nextMaintenance                   DateTime?      @map("next_maintenance")
  statusId                          String?        @map("status_uid")
  updatedOn                         DateTime       @map("updated_on")
  personInCharge                    String?        @map("person_in_charge")
  tag                               String?
  user_asset_created_byTouser       User           @relation("asset_created_byTouser", fields: [createdBy], references: [id], onDelete: Cascade)
  user_asset_person_in_chargeTouser User?          @relation("asset_person_in_chargeTouser", fields: [personInCharge], references: [id], onDelete: Cascade)
  asset_status                      AssetStatus?   @relation(fields: [statusId], references: [uid], onDelete: Cascade)
  asset_type                        AssetType?     @relation(fields: [type], references: [uid], onDelete: Cascade)
  user_asset_updated_byTouser       User           @relation("asset_updated_byTouser", fields: [updatedBy], references: [id], onDelete: Cascade)
  asset_tags                        AssetTag[]
  checklist                         Checklist[]
  checklist_use                     ChecklistUse[]
  maintenance                       Maintenance[]

  @@map("asset")
  @@schema("public")
}

model AssetStatus {
  uid   String  @id
  title String
  color String?
  asset Asset[]

  @@map("asset_status")
  @@schema("public")
}

model AssetTag {
  uid                    String          @id
  title                  String
  color                  String?
  asset_uid              String
  asset_tags_library_uid String
  asset_tags_library     AssetTagLibrary @relation(fields: [asset_tags_library_uid], references: [uid], onDelete: Cascade)
  asset                  Asset           @relation(fields: [asset_uid], references: [uid], onDelete: Cascade)

  @@map("asset_tags")
  @@schema("public")
}

model AssetTagLibrary {
  uid                                      String     @id
  title                                    String
  color                                    String?
  created_on                               DateTime
  updated_on                               DateTime
  created_by                               String
  updated_by                               String
  asset_tags                               AssetTag[]
  user_asset_tags_library_created_byTouser User       @relation("asset_tags_library_created_byTouser", fields: [created_by], references: [id], onDelete: Cascade)
  user_asset_tags_library_updated_byTouser User       @relation("asset_tags_library_updated_byTouser", fields: [updated_by], references: [id], onDelete: Cascade)

  @@map("asset_tags_library")
  @@schema("public")
}

model AssetType {
  uid                              String   @id
  created_on                       DateTime
  created_by                       String
  updated_on                       DateTime
  updated_by                       String
  title                            String
  description                      String?
  icon                             String?
  asset                            Asset[]
  user_asset_type_created_byTouser User     @relation("asset_type_created_byTouser", fields: [created_by], references: [id], onDelete: Cascade)
  user_asset_type_updated_byTouser User     @relation("asset_type_updated_byTouser", fields: [updated_by], references: [id], onDelete: Cascade)

  @@map("asset_type")
  @@schema("public")
}

model Checklist {
  uid                             String      @id
  created_on                      DateTime
  created_by                      String
  updated_on                      DateTime
  updated_by                      String
  title                           String
  description                     String?
  color                           String?
  icon                            String?
  maintenance_uid                 String
  asset_id                        String
  asset                           Asset       @relation(fields: [asset_id], references: [uid], onDelete: Cascade, map: "checklist_asset_fk")
  user_checklist_created_byTouser User        @relation("checklist_created_byTouser", fields: [created_by], references: [id], onDelete: Cascade)
  maintenance                     Maintenance @relation(fields: [maintenance_uid], references: [uid], onDelete: Cascade)
  user_checklist_updated_byTouser User        @relation("checklist_updated_byTouser", fields: [updated_by], references: [id], onDelete: Cascade)
  task                            Task[]

  @@map("checklist")
  @@schema("public")
}

model ChecklistLibrary {
  uid                                     String         @id
  created_on                              DateTime
  created_by                              String
  updated_on                              DateTime
  updated_by                              String
  title                                   String
  description                             String?
  color                                   String?
  icon                                    String?
  user_checklist_library_created_byTouser User           @relation("checklist_library_created_byTouser", fields: [created_by], references: [id], onDelete: Cascade)
  user_checklist_library_updated_byTouser User           @relation("checklist_library_updated_byTouser", fields: [updated_by], references: [id], onDelete: Cascade)
  checklist_use                           ChecklistUse[]

  @@map("checklist_library")
  @@schema("public")
}

model ChecklistUse {
  uid                                 String            @id
  created_on                          DateTime?
  created_by                          String?
  updated_on                          DateTime?
  updated_by                          String?
  title                               String
  description                         String?
  color                               String?
  icon                                String?
  checklist_library_uid               String?
  asset_uid                           String
  asset                               Asset             @relation(fields: [asset_uid], references: [uid], onDelete: Cascade)
  checklist_library                   ChecklistLibrary? @relation(fields: [checklist_library_uid], references: [uid], onDelete: Cascade)
  user_checklist_use_created_byTouser User?             @relation("checklist_use_created_byTouser", fields: [created_by], references: [id], onDelete: NoAction, onUpdate: NoAction)
  user_checklist_use_updated_byTouser User?             @relation("checklist_use_updated_byTouser", fields: [updated_by], references: [id], onDelete: NoAction, onUpdate: NoAction)
  task_use                            TaskUse[]

  @@map("checklist_use")
  @@schema("public")
}

model History {
  uid                   String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  created_on            DateTime
  activity              String
  action_by             String
  action_on             DateTime
  task_uid              String?
  subtask_uid           String?
  maintenance_uid       String?
  asset_uid             String?
  subtask_use_uid       String?
  task_use              String?
  checklist_use         String?
  subtask_library_uid   String?
  task_library_uid      String?
  checklist_library_uid String?
  asset_tags_library    String?
  asset_type_uid        String?
  asset_tags_uid        String?
  user_uid              String?
  user                  User     @relation(fields: [action_by], references: [id])

  @@map("history")
  @@schema("public")
}

model Maintenance {
  uid             String      @id
  asset_uid       String?
  date            DateTime
  maintainee      String?
  attachment_path String?
  approved_by     String?
  approved_on     DateTime?
  asset_ids       String[]
  deadline        DateTime?
  checklist       Checklist[]
  asset           Asset?      @relation(fields: [asset_uid], references: [uid], onDelete: Cascade)

  @@map("maintenance")
  @@schema("public")
}

model Subtask {
  uid             String    @id
  task_activity   String
  description     String?
  is_complete     Boolean   @default(false)
  remarks         String?
  issue           String?
  deadline        DateTime?
  completed_by    String?
  task_uid        String
  task_order      Int       @db.SmallInt
  task_type       TaskType? @default(choice)
  list_choice     String[]  @default([])
  task_number_val Int?      @db.SmallInt
  task_check      Boolean?
  task_selected   String[]
  task_bool       Boolean?  @default(false)
  task            Task      @relation(fields: [task_uid], references: [uid], onDelete: Cascade)

  @@map("subtask")
  @@schema("public")
}

model SubtaskLibrary {
  uid                                   String       @id
  task_activity                         String
  description                           String?
  task_order                            BigInt
  created_on                            DateTime
  created_by                            String
  updated_on                            DateTime
  updated_by                            String
  user_subtask_library_created_byTouser User         @relation("subtask_library_created_byTouser", fields: [created_by], references: [id], onDelete: Cascade)
  user_subtask_library_updated_byTouser User         @relation("subtask_library_updated_byTouser", fields: [updated_by], references: [id], onDelete: Cascade)
  subtask_use                           SubtaskUse[]

  @@map("subtask_library")
  @@schema("public")
}

model SubtaskUse {
  uid                 String          @id
  task_activity       String
  description         String?
  task_use_uid        String
  task_order          Int             @db.SmallInt
  subtask_library_uid String?
  subtask_library     SubtaskLibrary? @relation(fields: [subtask_library_uid], references: [uid], onDelete: Cascade)
  task_use            TaskUse         @relation(fields: [task_use_uid], references: [uid], onDelete: Cascade)

  @@map("subtask_use")
  @@schema("public")
}

model Task {
  uid             String    @id(map: "task2_pkey")
  task_activity   String?
  description     String?
  is_complete     Boolean   @default(false)
  remarks         String?
  issue           String?
  deadline        DateTime?
  completed_by    String?
  task_order      Int       @db.SmallInt
  have_subtask    Boolean   @default(false)
  checklist_uid   String
  task_type       TaskType  @default(check)
  list_choice     String[]  @default([])
  task_bool       Boolean?
  task_selected   String[]  @default([])
  task_number_val Int?      @db.SmallInt
  task_check      Boolean?  @default(false)
  subtask         Subtask[]
  checklist       Checklist @relation(fields: [checklist_uid], references: [uid], onDelete: Cascade)

  @@map("task")
  @@schema("public")
}

model TaskLibrary {
  uid                                String    @id
  created_on                         DateTime
  created_by                         String
  updated_by                         String
  updated_on                         DateTime
  task_activity                      String
  description                        String?
  have_subtask                       Boolean
  task_order                         BigInt
  user_task_library_created_byTouser User      @relation("task_library_created_byTouser", fields: [created_by], references: [id], onDelete: Cascade)
  user_task_library_updated_byTouser User      @relation("task_library_updated_byTouser", fields: [updated_by], references: [id], onDelete: Cascade)
  task_use                           TaskUse[]

  @@map("task_library")
  @@schema("public")
}

model TaskUse {
  uid               String       @id
  task_activity     String
  description       String?
  task_order        Int          @db.SmallInt
  have_subtask      Boolean      @default(false)
  checklist_use_uid String
  task_library_uid  String?
  subtask_use       SubtaskUse[]
  checklist_use     ChecklistUse @relation(fields: [checklist_use_uid], references: [uid], onDelete: Cascade)
  task_library      TaskLibrary? @relation(fields: [task_library_uid], references: [uid], onDelete: Cascade)

  @@map("task_use")
  @@schema("public")
}

model Account {
  id                   String    @id
  user_id              String
  provider_account_id  String
  refresh_token        String?
  access_token         String?
  access_token_expires DateTime?
  provider             String
  scope                String?
  sessionState         String?   @map("session_state")
  token_type           String?
  user                 User      @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@map("account")
  @@schema("public")
}

model VerificationRequest {
  id         String   @id
  identifier String
  token      String   @unique
  created_at DateTime
  updated_at DateTime

  @@map("verification_request")
  @@schema("public")
}

model User {
  id                                                     String             @id @default(cuid())
  name                                                   String
  createdAt                                              DateTime           @map("created_at")
  updatedAt                                              DateTime           @map("updated_at")
  department                                             Department?        @default(MANAGEMENT)
  role                                                   Role?              @default(ADMIN)
  email                                                  String             @unique
  password                                               String
  emailVerified                                          DateTime?          @map("email_verified")
  image                                                  String?
  account                                                Account[]
  asset_asset_created_byTouser                           Asset[]            @relation("asset_created_byTouser")
  asset_asset_person_in_chargeTouser                     Asset[]            @relation("asset_person_in_chargeTouser")
  asset_asset_updated_byTouser                           Asset[]            @relation("asset_updated_byTouser")
  asset_tags_library_asset_tags_library_created_byTouser AssetTagLibrary[]  @relation("asset_tags_library_created_byTouser")
  asset_tags_library_asset_tags_library_updated_byTouser AssetTagLibrary[]  @relation("asset_tags_library_updated_byTouser")
  asset_type_asset_type_created_byTouser                 AssetType[]        @relation("asset_type_created_byTouser")
  asset_type_asset_type_updated_byTouser                 AssetType[]        @relation("asset_type_updated_byTouser")
  checklist_checklist_created_byTouser                   Checklist[]        @relation("checklist_created_byTouser")
  checklist_checklist_updated_byTouser                   Checklist[]        @relation("checklist_updated_byTouser")
  checklist_library_checklist_library_created_byTouser   ChecklistLibrary[] @relation("checklist_library_created_byTouser")
  checklist_library_checklist_library_updated_byTouser   ChecklistLibrary[] @relation("checklist_library_updated_byTouser")
  checklist_use_checklist_use_created_byTouser           ChecklistUse[]     @relation("checklist_use_created_byTouser")
  checklist_use_checklist_use_updated_byTouser           ChecklistUse[]     @relation("checklist_use_updated_byTouser")
  history                                                History[]
  subtask_library_subtask_library_created_byTouser       SubtaskLibrary[]   @relation("subtask_library_created_byTouser")
  subtask_library_subtask_library_updated_byTouser       SubtaskLibrary[]   @relation("subtask_library_updated_byTouser")
  task_library_task_library_created_byTouser             TaskLibrary[]      @relation("task_library_created_byTouser")
  task_library_task_library_updated_byTouser             TaskLibrary[]      @relation("task_library_updated_byTouser")

  @@map("user")
  @@schema("public")
}