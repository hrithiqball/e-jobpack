generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["multiSchema"]
  binaryTargets   = ["native", "linux-musl-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  schemas  = ["public"]
}

model Asset {
  name                              String
  description                       String?
  type                              String?
  createdBy                         String         @map("created_by")
  createdOn                         DateTime       @default(now()) @map("created_on")
  updatedBy                         String         @map("updated_by")
  lastMaintenance                   DateTime?      @map("last_maintenance")
  lastMaintainee                    String[]       @map("last_maintainee")
  location                          String?
  nextMaintenance                   DateTime?      @map("next_maintenance")
  updatedOn                         DateTime       @default(now()) @map("updated_on")
  personInCharge                    String?        @map("person_in_charge")
  tag                               String?
  id                                String         @id
  statusId                          String?        @map("status_id")
  isArchive                         Boolean?       @default(false) @map("is_archive")
  user_asset_created_byTouser       User           @relation("asset_created_byTouser", fields: [createdBy], references: [id], onDelete: Cascade)
  user_asset_person_in_chargeTouser User?          @relation("asset_person_in_chargeTouser", fields: [personInCharge], references: [id], onDelete: Cascade)
  asset_status                      AssetStatus?   @relation(fields: [statusId], references: [id], onDelete: Cascade)
  asset_type                        AssetType?     @relation(fields: [type], references: [id], onDelete: Cascade)
  user_asset_updated_byTouser       User           @relation("asset_updated_byTouser", fields: [updatedBy], references: [id], onDelete: Cascade)
  asset_tags                        AssetTag[]
  checklist                         Checklist[]
  checklist_use                     ChecklistUse[]

  @@map("asset")
  @@schema("public")
}

model AssetStatus {
  title String
  color String?
  id    String  @id
  asset Asset[]

  @@map("asset_status")
  @@schema("public")
}

model AssetTag {
  title              String
  color              String?
  assetId            String          @map("asset_id")
  assetTagsLibraryId String          @map("asset_tags_library_id")
  id                 String          @id
  asset              Asset           @relation(fields: [assetId], references: [id], onDelete: Cascade)
  asset_tags_library AssetTagLibrary @relation(fields: [assetTagsLibraryId], references: [id], onDelete: Cascade)

  @@map("asset_tags")
  @@schema("public")
}

model AssetTagLibrary {
  title                                    String
  color                                    String?
  createdOn                                DateTime   @default(now()) @map("created_on")
  updatedOn                                DateTime   @default(now()) @map("updated_on")
  createdBy                                String     @map("created_by")
  updatedBy                                String     @map("updated_by")
  id                                       String     @id
  asset_tags                               AssetTag[]
  user_asset_tags_library_created_byTouser User       @relation("asset_tags_library_created_byTouser", fields: [createdBy], references: [id], onDelete: Cascade)
  user_asset_tags_library_updated_byTouser User       @relation("asset_tags_library_updated_byTouser", fields: [updatedBy], references: [id], onDelete: Cascade)

  @@map("asset_tags_library")
  @@schema("public")
}

model AssetType {
  createdOn                        DateTime @default(now()) @map("created_on")
  createdBy                        String   @map("created_by")
  updatedOn                        DateTime @default(now()) @map("updated_on")
  updatedBy                        String   @map("updated_by")
  title                            String
  description                      String?
  icon                             String?
  id                               String   @id @default(cuid())
  asset                            Asset[]
  user_asset_type_created_byTouser User     @relation("asset_type_created_byTouser", fields: [createdBy], references: [id], onDelete: Cascade)
  user_asset_type_updated_byTouser User     @relation("asset_type_updated_byTouser", fields: [updatedBy], references: [id], onDelete: Cascade)

  @@map("asset_type")
  @@schema("public")
}

model Checklist {
  createdOn                       DateTime    @default(now()) @map("created_on")
  createdBy                       String      @map("created_by")
  updatedOn                       DateTime    @default(now()) @map("updated_on")
  updatedBy                       String      @map("updated_by")
  isClose                         Boolean     @default(false) @map("is_close")
  description                     String?
  color                           String?
  icon                            String?
  assetId                         String      @map("asset_id")
  id                              String      @id
  maintenanceId                   String      @map("maintenance_id")
  asset                           Asset       @relation(fields: [assetId], references: [id], onDelete: Cascade, map: "checklist_asset_fk")
  user_checklist_created_byTouser User        @relation("checklist_created_byTouser", fields: [createdBy], references: [id], onDelete: Cascade)
  maintenance                     Maintenance @relation(fields: [maintenanceId], references: [id], onDelete: Cascade)
  user_checklist_updated_byTouser User        @relation("checklist_updated_byTouser", fields: [updatedBy], references: [id], onDelete: Cascade)
  task                            Task[]

  @@map("checklist")
  @@schema("public")
}

model ChecklistLibrary {
  createdOn                               DateTime       @default(now()) @map("created_on")
  createdBy                               String         @map("created_by")
  updatedOn                               DateTime       @default(now()) @map("updated_on")
  updatedBy                               String         @map("updated_by")
  title                                   String
  description                             String?
  color                                   String?
  icon                                    String?
  id                                      String         @id
  user_checklist_library_created_byTouser User           @relation("checklist_library_created_byTouser", fields: [createdBy], references: [id], onDelete: Cascade)
  user_checklist_library_updated_byTouser User           @relation("checklist_library_updated_byTouser", fields: [updatedBy], references: [id], onDelete: Cascade)
  checklist_use                           ChecklistUse[]

  @@map("checklist_library")
  @@schema("public")
}

model ChecklistUse {
  createdOn                           DateTime?         @default(now()) @map("created_on")
  createdBy                           String?           @map("created_by")
  updatedOn                           DateTime?         @default(now()) @map("updated_on")
  updatedBy                           String?           @map("updated_by")
  title                               String
  description                         String?
  color                               String?
  icon                                String?
  assetId                             String            @map("asset_id")
  checklistLibraryId                  String?           @map("checklist_library_id")
  id                                  String            @id
  asset                               Asset             @relation(fields: [assetId], references: [id], onDelete: Cascade)
  checklist_library                   ChecklistLibrary? @relation(fields: [checklistLibraryId], references: [id], onDelete: Cascade)
  user_checklist_use_created_byTouser User?             @relation("checklist_use_created_byTouser", fields: [createdBy], references: [id], onDelete: NoAction, onUpdate: NoAction)
  user_checklist_use_updated_byTouser User?             @relation("checklist_use_updated_byTouser", fields: [updatedBy], references: [id], onDelete: NoAction, onUpdate: NoAction)
  task_use                            TaskUse[]

  @@map("checklist_use")
  @@schema("public")
}

model History {
  id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  activity  String
  actionBy  String   @map("action_by")
  actionOn  DateTime @map("action_on") @default(now())
  user      User     @relation(fields: [actionBy], references: [id])

  @@map("history")
  @@schema("public")
}

model Maintenance {
  date                               DateTime
  maintainee                         String?
  attachmentPath                     String?     @map("attachment_path")
  requestedBy                        String?     @map("requested_by")
  requestedOn                        DateTime?   @map("requested_on")
  approvedBy                         String?     @map("approved_by")
  approvedOn                         DateTime?   @map("approved_on")
  assetIds                           String[]    @map("asset_ids")
  startDate                          DateTime?   @default(now()) @map("start_date")
  deadline                           DateTime?
  id                                 String      @id @default(cuid())
  isOpen                             Boolean     @default(false) @map("is_open")
  isClose                            Boolean     @default(false) @map("is_close")
  closedBy                           String?     @map("closed_by")
  closedOn                           DateTime?   @map("closed_on")
  checklist                          Checklist[]
  user_maintenance_approved_byTouser User?       @relation("maintenance_approved_byTouser", fields: [approvedBy], references: [id], onDelete: NoAction, onUpdate: NoAction)
  user_maintenance_closed_byTouser   User?       @relation("maintenance_closed_byTouser", fields: [closedBy], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@map("maintenance")
  @@schema("public")
}

model Subtask {
  taskActivity  String    @map("task_activity")
  description   String?
  isComplete    Boolean   @default(false) @map("is_complete")
  remarks       String?
  issue         String?
  deadline      DateTime?
  completedBy   String?   @map("completed_by")
  taskOrder     Int       @map("task_order") @db.SmallInt
  taskType      TaskType? @default(choice) @map("task_type")
  listChoice    String[]  @default([]) @map("list_choice")
  taskNumberVal Int?      @map("task_number_val") @db.SmallInt
  taskCheck     Boolean?  @default(false) @map("task_check")
  taskSelected  String[]  @default([]) @map("task_selected")
  id            String    @id
  taskBool      Boolean?  @default(false)
  taskId        String    @map("task_id")
  task          Task      @relation(fields: [taskId], references: [id], onDelete: Cascade)

  @@map("subtask")
  @@schema("public")
}

model SubtaskLibrary {
  taskActivity                          String       @map("task_activity")
  description                           String?
  taskOrder                             BigInt       @map("task_order")
  createdOn                             DateTime     @default(now()) @map("created_on")
  createdBy                             String       @map("created_by")
  updatedOn                             DateTime     @default(now()) @map("updated_on")
  updatedBy                             String       @map("updated_by")
  id                                    String       @id
  user_subtask_library_created_byTouser User         @relation("subtask_library_created_byTouser", fields: [createdBy], references: [id], onDelete: Cascade)
  user_subtask_library_updated_byTouser User         @relation("subtask_library_updated_byTouser", fields: [updatedBy], references: [id], onDelete: Cascade)
  subtask_use                           SubtaskUse[]

  @@map("subtask_library")
  @@schema("public")
}

model SubtaskUse {
  taskActivity     String          @map("task_activity")
  description      String?
  taskOrder        Int             @map("task_order") @db.SmallInt
  id               String          @id
  subtaskLibraryId String?         @map("subtask_library_id")
  taskUseId        String          @map("task_use_id")
  subtask_library  SubtaskLibrary? @relation(fields: [subtaskLibraryId], references: [id], onDelete: Cascade)
  task_use         TaskUse         @relation(fields: [taskUseId], references: [id], onDelete: Cascade)

  @@map("subtask_use")
  @@schema("public")
}

model Task {
  taskActivity  String?   @map("task_activity")
  description   String?
  isComplete    Boolean   @default(false) @map("is_complete")
  remarks       String?
  issue         String?
  deadline      DateTime?
  completedBy   String?   @map("completed_by")
  taskOrder     Int       @map("task_order") @db.SmallInt
  haveSubtask   Boolean   @default(false) @map("have_subtask")
  taskType      TaskType  @default(check) @map("task_type")
  listChoice    String[]  @default([]) @map("list_choice")
  taskBool      Boolean?  @default(false) @map("task_bool")
  taskSelected  String[]  @default([]) @map("task_selected")
  taskNumberVal Int?      @map("task_number_val") @db.SmallInt
  taskCheck     Boolean?  @default(false) @map("task_check")
  checklistId   String    @map("checklist_id")
  id            String    @id(map: "task2_pkey")
  subtask       Subtask[]
  checklist     Checklist @relation(fields: [checklistId], references: [id], onDelete: Cascade)

  @@map("task")
  @@schema("public")
}

model TaskLibrary {
  createdOn                          DateTime  @default(now()) @map("created_on")
  createdBy                          String    @map("created_by")
  updatedBy                          String    @map("updated_by")
  updatedOn                          DateTime  @default(now()) @map("updated_on")
  taskActivity                       String    @map("task_activity")
  description                        String?
  haveSubtask                        Boolean   @default(false) @map("have_subtask")
  taskOrder                          BigInt    @map("task_order")
  id                                 String    @id
  user_task_library_created_byTouser User      @relation("task_library_created_byTouser", fields: [createdBy], references: [id], onDelete: Cascade)
  user_task_library_updated_byTouser User      @relation("task_library_updated_byTouser", fields: [updatedBy], references: [id], onDelete: Cascade)
  task_use                           TaskUse[]

  @@map("task_library")
  @@schema("public")
}

model TaskUse {
  taskActivity   String       @map("task_activity")
  description    String?
  taskOrder      Int          @map("task_order") @db.SmallInt
  haveSubtask    Boolean      @default(false) @map("have_subtask")
  checklistUseId String       @map("checklist_use_id")
  id             String       @id
  taskLibraryId  String?      @map("task_library_id")
  subtask_use    SubtaskUse[]
  checklist_use  ChecklistUse @relation(fields: [checklistUseId], references: [id], onDelete: Cascade)
  task_library   TaskLibrary? @relation(fields: [taskLibraryId], references: [id], onDelete: Cascade)

  @@map("task_use")
  @@schema("public")
}

model Account {
  id                 String    @id
  userId             String    @map("user_id")
  refreshToken       String?   @map("refresh_token")
  accessToken        String?   @map("access_token")
  accessTokenExpires DateTime? @map("access_token_expires")
  provider           String
  user               User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("account")
  @@schema("public")
}

model VerificationRequest {
  id         String   @id
  identifier String
  token      String   @unique
  createdAt  DateTime @map("created_at")
  updatedAt  DateTime @map("updated_at")

  @@map("verification_request")
  @@schema("public")
}

model User {
  id                                                     String             @id @default(cuid())
  name                                                   String
  createdAt                                              DateTime           @default(now()) @map("created_at")
  updatedAt                                              DateTime           @default(now()) @map("updated_at")
  department                                             Department?        @default(MANAGEMENT)
  role                                                   Role?              @default(ADMIN)
  email                                                  String             @unique
  password                                               String
  emailVerified                                          DateTime?          @map("email_verified")
  image                                                  String?
  phone                                                  String?
  account                                                Account[]
  asset_asset_created_byTouser                           Asset[]            @relation("asset_created_byTouser")
  asset_asset_person_in_chargeTouser                     Asset[]            @relation("asset_person_in_chargeTouser")
  asset_asset_updated_byTouser                           Asset[]            @relation("asset_updated_byTouser")
  asset_tags_library_asset_tags_library_created_byTouser AssetTagLibrary[]  @relation("asset_tags_library_created_byTouser")
  asset_tags_library_asset_tags_library_updated_byTouser AssetTagLibrary[]  @relation("asset_tags_library_updated_byTouser")
  asset_type_asset_type_created_byTouser                 AssetType[]        @relation("asset_type_created_byTouser")
  asset_type_asset_type_updated_byTouser                 AssetType[]        @relation("asset_type_updated_byTouser")
  checklist_checklist_created_byTouser                   Checklist[]        @relation("checklist_created_byTouser")
  checklist_checklist_updated_byTouser                   Checklist[]        @relation("checklist_updated_byTouser")
  checklist_library_checklist_library_created_byTouser   ChecklistLibrary[] @relation("checklist_library_created_byTouser")
  checklist_library_checklist_library_updated_byTouser   ChecklistLibrary[] @relation("checklist_library_updated_byTouser")
  checklist_use_checklist_use_created_byTouser           ChecklistUse[]     @relation("checklist_use_created_byTouser")
  checklist_use_checklist_use_updated_byTouser           ChecklistUse[]     @relation("checklist_use_updated_byTouser")
  history                                                History[]
  maintenance_maintenance_approved_byTouser              Maintenance[]      @relation("maintenance_approved_byTouser")
  maintenance_maintenance_closed_byTouser                Maintenance[]      @relation("maintenance_closed_byTouser")
  subtask_library_subtask_library_created_byTouser       SubtaskLibrary[]   @relation("subtask_library_created_byTouser")
  subtask_library_subtask_library_updated_byTouser       SubtaskLibrary[]   @relation("subtask_library_updated_byTouser")
  task_library_task_library_created_byTouser             TaskLibrary[]      @relation("task_library_created_byTouser")
  task_library_task_library_updated_byTouser             TaskLibrary[]      @relation("task_library_updated_byTouser")

  @@map("user")
  @@schema("public")
}

enum Department {
  INSTRUMENT
  ELECTRICAL
  MECHANICAL
  MANAGEMENT

  @@schema("public")
}

enum Role {
  ADMIN
  SUPERVISOR
  TECHNICIAN

  @@schema("public")
}

enum TaskType {
  choice
  selectOne
  check
  number
  selectMultiple
  CHOICE
  NUMBER
  CHECK
  MULTIPLE_SELECT
  SINGLE_SELECT

  @@schema("public")
}
